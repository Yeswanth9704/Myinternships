class Task:
    def __init__(self, description, due_date=None, priority=None):
        self.description = description
        self.due_date = due_date
        self.priority = priority
        self.completed = False

class ToDoList:
    def __init__(self):
        self.tasks = []
        self.completed_tasks = []

    def add_task(self, description, due_date=None, priority=None):
        new_task = Task(description, due_date, priority)
        self.tasks.append(new_task)

    def display_tasks(self):
        print("Task List:")
        for index, task in enumerate(self.tasks):
            print(f"{index + 1}. Description: {task.description}, Due Date: {task.due_date}, Priority: {task.priority}, Completed: {task.completed}")

    def mark_task_as_completed(self, task_index):
        if 0 <= task_index < len(self.tasks):
            completed_task = self.tasks.pop(task_index)
            completed_task.completed = True
            self.completed_tasks.append(completed_task)

    def update_task(self, task_index, new_description=None, new_due_date=None, new_priority=None):
        if 0 <= task_index < len(self.tasks):
            task = self.tasks[task_index]
            if new_description:
                task.description = new_description
            if new_due_date:
                task.due_date = new_due_date
            if new_priority:
                task.priority = new_priority

    def remove_task(self, task_index):
        if 0 <= task_index < len(self.tasks):
            del self.tasks[task_index]

def main():
    todo_list = ToDoList()

    while True:
        print("\nMenu:")
        print("1. Add Task")
        print("2. Display Tasks")
        print("3. Mark Task as Completed")
        print("4. Update Task")
        print("5. Remove Task")
        print("0. Exit")

        choice = input("Enter your choice: ")

        if choice == "1":
            description = input("Enter task description: ")
            due_date = input("Enter due date (optional): ")
            priority = input("Enter priority (optional): ")
            todo_list.add_task(description, due_date, priority)
        elif choice == "2":
            todo_list.display_tasks()
        elif choice == "3":
            task_index = int(input("Enter task index to mark as completed: ")) - 1
            todo_list.mark_task_as_completed(task_index)
        elif choice == "4":
            task_index = int(input("Enter task index to update: ")) - 1
            new_description = input("Enter new description (press Enter to skip): ")
            new_due_date = input("Enter new due date (press Enter to skip): ")
            new_priority = input("Enter new priority (press Enter to skip): ")
            todo_list.update_task(task_index, new_description, new_due_date, new_priority)
        elif choice == "5":
            task_index = int(input("Enter task index to remove: ")) - 1
            todo_list.remove_task(task_index)
        elif choice == "0":
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()